// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MailPlus.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class MailingDetails
    {
        /// <summary>
        /// Initializes a new instance of the MailingDetails class.
        /// </summary>
        public MailingDetails() { }

        /// <summary>
        /// Initializes a new instance of the MailingDetails class.
        /// </summary>
        public MailingDetails(string encryptedId, Message message, string name, DateTime scheduledStartDate, string sender, int sentCount, string targetGroup, string type, string archiveLink = default(string), IList<MailingLink> links = default(IList<MailingLink>))
        {
            ArchiveLink = archiveLink;
            EncryptedId = encryptedId;
            Links = links;
            Message = message;
            Name = name;
            ScheduledStartDate = scheduledStartDate;
            Sender = sender;
            SentCount = sentCount;
            TargetGroup = targetGroup;
            Type = type;
        }

        /// <summary>
        /// Link to an online version of the mailing
        /// </summary>
        [JsonProperty(PropertyName = "archiveLink")]
        public string ArchiveLink { get; set; }

        /// <summary>
        /// encryptedMailingId (Use '/mailing/*' to request additional data)
        /// </summary>
        [JsonProperty(PropertyName = "encryptedId")]
        public string EncryptedId { get; set; }

        /// <summary>
        /// trackable links of the mailing
        /// </summary>
        [JsonProperty(PropertyName = "links")]
        public IList<MailingLink> Links { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public Message Message { get; set; }

        /// <summary>
        /// Mailing name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Date &amp; time the mailing was scheduled to send
        /// </summary>
        [JsonProperty(PropertyName = "scheduledStartDate")]
        public DateTime ScheduledStartDate { get; set; }

        /// <summary>
        /// Sender name
        /// </summary>
        [JsonProperty(PropertyName = "sender")]
        public string Sender { get; set; }

        /// <summary>
        /// Number of mailings sent
        /// </summary>
        [JsonProperty(PropertyName = "sentCount")]
        public int SentCount { get; set; }

        /// <summary>
        /// Target group name
        /// </summary>
        [JsonProperty(PropertyName = "targetGroup")]
        public string TargetGroup { get; set; }

        /// <summary>
        /// Possible values include: 'EMAIL', 'SMS', 'DM'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (EncryptedId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EncryptedId");
            }
            if (Message == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Message");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Sender == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Sender");
            }
            if (TargetGroup == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetGroup");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (this.Links != null)
            {
                foreach (var element in this.Links)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Message != null)
            {
                this.Message.Validate();
            }
        }
    }
}
