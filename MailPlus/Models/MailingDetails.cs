// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MailPlus.Models
{
    using System.Linq;

    public partial class MailingDetails
    {
        /// <summary>
        /// Initializes a new instance of the MailingDetails class.
        /// </summary>
        public MailingDetails() { }

        /// <summary>
        /// Initializes a new instance of the MailingDetails class.
        /// </summary>
        /// <param name="encryptedId">encryptedMailingId (Use '/mailing/*' to
        /// request additional data)</param>
        /// <param name="name">Mailing name</param>
        /// <param name="scheduledStartDate">Date & time the mailing was
        /// scheduled to send</param>
        /// <param name="sender">Sender name</param>
        /// <param name="sentCount">Number of mailings sent</param>
        /// <param name="targetGroup">Target group name</param>
        /// <param name="type">Possible values include: 'EMAIL', 'SMS',
        /// 'DM'</param>
        /// <param name="archiveLink">Link to an online version of the
        /// mailing</param>
        /// <param name="links">trackable links of the mailing</param>
        public MailingDetails(string encryptedId, Message message, string name, System.DateTime scheduledStartDate, string sender, int sentCount, string targetGroup, string type, string archiveLink = default(string), System.Collections.Generic.IList<MailingLink> links = default(System.Collections.Generic.IList<MailingLink>))
        {
            ArchiveLink = archiveLink;
            EncryptedId = encryptedId;
            Links = links;
            Message = message;
            Name = name;
            ScheduledStartDate = scheduledStartDate;
            Sender = sender;
            SentCount = sentCount;
            TargetGroup = targetGroup;
            Type = type;
        }

        /// <summary>
        /// Gets or sets link to an online version of the mailing
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "archiveLink")]
        public string ArchiveLink { get; set; }

        /// <summary>
        /// Gets or sets encryptedMailingId (Use '/mailing/*' to request
        /// additional data)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedId")]
        public string EncryptedId { get; set; }

        /// <summary>
        /// Gets or sets trackable links of the mailing
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "links")]
        public System.Collections.Generic.IList<MailingLink> Links { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "message")]
        public Message Message { get; set; }

        /// <summary>
        /// Gets or sets mailing name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets date &amp; time the mailing was scheduled to send
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scheduledStartDate")]
        public System.DateTime ScheduledStartDate { get; set; }

        /// <summary>
        /// Gets or sets sender name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sender")]
        public string Sender { get; set; }

        /// <summary>
        /// Gets or sets number of mailings sent
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sentCount")]
        public int SentCount { get; set; }

        /// <summary>
        /// Gets or sets target group name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetGroup")]
        public string TargetGroup { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'EMAIL', 'SMS', 'DM'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EncryptedId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "EncryptedId");
            }
            if (Message == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Message");
            }
            if (Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (Sender == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Sender");
            }
            if (TargetGroup == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TargetGroup");
            }
            if (Type == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Type");
            }
            if (this.Links != null)
            {
                foreach (var element in this.Links)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Message != null)
            {
                this.Message.Validate();
            }
        }
    }
}
