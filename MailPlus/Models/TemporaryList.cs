// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MailPlus.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class TemporaryList
    {
        /// <summary>
        /// Initializes a new instance of the TemporaryList class.
        /// </summary>
        public TemporaryList() { }

        /// <summary>
        /// Initializes a new instance of the TemporaryList class.
        /// </summary>
        public TemporaryList(DateTime createdAt, string name, string type, string externalTemporaryListId = default(string))
        {
            CreatedAt = createdAt;
            ExternalTemporaryListId = externalTemporaryListId;
            Name = name;
            Type = type;
        }

        /// <summary>
        /// Date &amp; time the temporary list was created
        /// </summary>
        [JsonProperty(PropertyName = "createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Specified list reference by external system
        /// </summary>
        [JsonProperty(PropertyName = "externalTemporaryListId")]
        public string ExternalTemporaryListId { get; set; }

        /// <summary>
        /// Temporary list name visible in MailPlus
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Default value: API - Cannot be modified. Possible values include:
        /// 'IMPORT', 'RESPONSE', 'API', 'SPLIT'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
        }
    }
}
