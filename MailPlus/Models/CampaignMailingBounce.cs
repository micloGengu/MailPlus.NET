// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MailPlus.Models
{
    using System.Linq;

    public partial class CampaignMailingBounce
    {
        /// <summary>
        /// Initializes a new instance of the CampaignMailingBounce class.
        /// </summary>
        public CampaignMailingBounce() { }

        /// <summary>
        /// Initializes a new instance of the CampaignMailingBounce class.
        /// </summary>
        /// <param name="bounceDate">Date & time the bounce occured</param>
        /// <param name="type">Possible values include: 'HARDBOUNCE',
        /// 'SOFTBOUNCE'</param>
        public CampaignMailingBounce(System.DateTime bounceDate, int campaignSubscriptionId, ContactIdentifier contactIdentifier, string type)
        {
            BounceDate = bounceDate;
            CampaignSubscriptionId = campaignSubscriptionId;
            ContactIdentifier = contactIdentifier;
            Type = type;
        }

        /// <summary>
        /// Gets or sets date &amp; time the bounce occured
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bounceDate")]
        public System.DateTime BounceDate { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "campaignSubscriptionId")]
        public int CampaignSubscriptionId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "contactIdentifier")]
        public ContactIdentifier ContactIdentifier { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'HARDBOUNCE', 'SOFTBOUNCE'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ContactIdentifier == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ContactIdentifier");
            }
            if (Type == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Type");
            }
            if (this.ContactIdentifier != null)
            {
                this.ContactIdentifier.Validate();
            }
        }
    }
}
