// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MailPlus.Models
{
    using System.Linq;

    public partial class MailingStats
    {
        /// <summary>
        /// Initializes a new instance of the MailingStats class.
        /// </summary>
        public MailingStats() { }

        /// <summary>
        /// Initializes a new instance of the MailingStats class.
        /// </summary>
        /// <param name="acceptedCount">Accepted = Sent - hard bounce - soft
        /// bounce</param>
        /// <param name="clickCount">Unique clicks</param>
        /// <param name="conversionClickCount">Unique clicks on links marked
        /// as 'conversion'</param>
        /// <param name="hardbounceCount">Number of hard bounces</param>
        /// <param name="notRetainedAfterBounceCount">Hard bounces + 4x soft
        /// bounced in a row</param>
        /// <param name="openCount">Unique opens</param>
        /// <param name="openRenderedCount">Unique rendered opens (images
        /// downloaded)</param>
        /// <param name="sentCount">Number of recipients</param>
        /// <param name="softbounceCount">Number of soft bounces</param>
        /// <param name="unsubscribeCount">Number of unsubscribed
        /// contacts</param>
        /// <param name="conversionValue">Total conversion value in cents
        /// (eCom only)</param>
        /// <param name="shoppingcartConvertedCount">Unique converted shopping
        /// carts (eCom only)</param>
        /// <param name="shoppingcartCreatedCount">Unique created shopping
        /// carts (eCom only)</param>
        /// <param name="toWebshopCount">Unique clicks to webshop (eCom
        /// only)</param>
        public MailingStats(int acceptedCount, int clickCount, int conversionClickCount, int hardbounceCount, int notRetainedAfterBounceCount, int openCount, int openRenderedCount, int sentCount, int softbounceCount, int unsubscribeCount, long? conversionValue = default(long?), int? shoppingcartConvertedCount = default(int?), int? shoppingcartCreatedCount = default(int?), int? toWebshopCount = default(int?))
        {
            AcceptedCount = acceptedCount;
            ClickCount = clickCount;
            ConversionClickCount = conversionClickCount;
            ConversionValue = conversionValue;
            HardbounceCount = hardbounceCount;
            NotRetainedAfterBounceCount = notRetainedAfterBounceCount;
            OpenCount = openCount;
            OpenRenderedCount = openRenderedCount;
            SentCount = sentCount;
            ShoppingcartConvertedCount = shoppingcartConvertedCount;
            ShoppingcartCreatedCount = shoppingcartCreatedCount;
            SoftbounceCount = softbounceCount;
            ToWebshopCount = toWebshopCount;
            UnsubscribeCount = unsubscribeCount;
        }

        /// <summary>
        /// Gets or sets accepted = Sent - hard bounce - soft bounce
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "acceptedCount")]
        public int AcceptedCount { get; set; }

        /// <summary>
        /// Gets or sets unique clicks
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clickCount")]
        public int ClickCount { get; set; }

        /// <summary>
        /// Gets or sets unique clicks on links marked as 'conversion'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "conversionClickCount")]
        public int ConversionClickCount { get; set; }

        /// <summary>
        /// Gets or sets total conversion value in cents (eCom only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "conversionValue")]
        public long? ConversionValue { get; set; }

        /// <summary>
        /// Gets or sets number of hard bounces
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hardbounceCount")]
        public int HardbounceCount { get; set; }

        /// <summary>
        /// Gets or sets hard bounces + 4x soft bounced in a row
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "notRetainedAfterBounceCount")]
        public int NotRetainedAfterBounceCount { get; set; }

        /// <summary>
        /// Gets or sets unique opens
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "openCount")]
        public int OpenCount { get; set; }

        /// <summary>
        /// Gets or sets unique rendered opens (images downloaded)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "openRenderedCount")]
        public int OpenRenderedCount { get; set; }

        /// <summary>
        /// Gets or sets number of recipients
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sentCount")]
        public int SentCount { get; set; }

        /// <summary>
        /// Gets or sets unique converted shopping carts (eCom only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "shoppingcartConvertedCount")]
        public int? ShoppingcartConvertedCount { get; set; }

        /// <summary>
        /// Gets or sets unique created shopping carts (eCom only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "shoppingcartCreatedCount")]
        public int? ShoppingcartCreatedCount { get; set; }

        /// <summary>
        /// Gets or sets number of soft bounces
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "softbounceCount")]
        public int SoftbounceCount { get; set; }

        /// <summary>
        /// Gets or sets unique clicks to webshop (eCom only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "toWebshopCount")]
        public int? ToWebshopCount { get; set; }

        /// <summary>
        /// Gets or sets number of unsubscribed contacts
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "unsubscribeCount")]
        public int UnsubscribeCount { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
