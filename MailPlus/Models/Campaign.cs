// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MailPlus.Models
{
    using System.Linq;

    public partial class Campaign
    {
        /// <summary>
        /// Initializes a new instance of the Campaign class.
        /// </summary>
        public Campaign() { }

        /// <summary>
        /// Initializes a new instance of the Campaign class.
        /// </summary>
        /// <param name="active">Campaign status</param>
        /// <param name="encryptedId">encryptedCampaignId</param>
        /// <param name="name">Campaign name</param>
        public Campaign(bool active, string encryptedId, string name, System.Collections.Generic.IList<CampaignTrigger> triggers = default(System.Collections.Generic.IList<CampaignTrigger>))
        {
            Active = active;
            EncryptedId = encryptedId;
            Name = name;
            Triggers = triggers;
        }

        /// <summary>
        /// Gets or sets campaign status
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "active")]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or sets encryptedCampaignId
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedId")]
        public string EncryptedId { get; set; }

        /// <summary>
        /// Gets or sets campaign name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "triggers")]
        public System.Collections.Generic.IList<CampaignTrigger> Triggers { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EncryptedId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "EncryptedId");
            }
            if (Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (this.Triggers != null)
            {
                foreach (var element in this.Triggers)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
