// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MailPlus.Models
{
    using System.Linq;

    public partial class Property
    {
        /// <summary>
        /// Initializes a new instance of the Property class.
        /// </summary>
        public Property() { }

        /// <summary>
        /// Initializes a new instance of the Property class.
        /// </summary>
        /// <param name="description">Description label of the property</param>
        /// <param name="name">Name of the property</param>
        /// <param name="type">Possible values include: 'birthdate', 'date',
        /// 'dateTime', 'email', 'gender', 'int', 'mobNr', 'money',
        /// 'postcode', 'set', 'string'</param>
        /// <param name="entries">Only visible for 'SET' type. Defines the
        /// options and corresponding bit values</param>
        public Property(string description, string name, string type, System.Collections.Generic.IList<SetPropertyEntry> entries = default(System.Collections.Generic.IList<SetPropertyEntry>))
        {
            Description = description;
            Entries = entries;
            Name = name;
            Type = type;
        }

        /// <summary>
        /// Gets or sets description label of the property
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets only visible for 'SET' type. Defines the options and
        /// corresponding bit values
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "entries")]
        public System.Collections.Generic.IList<SetPropertyEntry> Entries { get; set; }

        /// <summary>
        /// Gets or sets name of the property
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'birthdate', 'date',
        /// 'dateTime', 'email', 'gender', 'int', 'mobNr', 'money',
        /// 'postcode', 'set', 'string'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Description == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Description");
            }
            if (Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (Type == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Type");
            }
            if (this.Entries != null)
            {
                foreach (var element in this.Entries)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
