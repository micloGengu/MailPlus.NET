// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MailPlus.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class ContactBounce
    {
        /// <summary>
        /// Initializes a new instance of the ContactBounce class.
        /// </summary>
        public ContactBounce() { }

        /// <summary>
        /// Initializes a new instance of the ContactBounce class.
        /// </summary>
        public ContactBounce(Contact contact, DateTime date, string type, string encryptedActId = default(string))
        {
            Contact = contact;
            Date = date;
            EncryptedActId = encryptedActId;
            Type = type;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contact")]
        public Contact Contact { get; set; }

        /// <summary>
        /// Date &amp; time the bounce occurred
        /// </summary>
        [JsonProperty(PropertyName = "date")]
        public DateTime Date { get; set; }

        /// <summary>
        /// encryptedMailingId (Use '/mailing/*' to request additional data)
        /// </summary>
        [JsonProperty(PropertyName = "encryptedActId")]
        public string EncryptedActId { get; set; }

        /// <summary>
        /// Possible values include: 'HARDBOUNCE', 'SOFTBOUNCE'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Contact == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Contact");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (this.Contact != null)
            {
                this.Contact.Validate();
            }
        }
    }
}
