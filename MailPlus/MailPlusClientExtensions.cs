// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MailPlus
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for MailPlusClient.
    /// </summary>
    public static partial class MailPlusClientExtensions
    {
            /// <summary>
            /// Get details of a campaign mailing
            /// </summary>
            /// <remarks>
            /// Returns the details of a given mailing sent by a campaign, including
            /// details of the used links.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            public static object GetCampaignMailingDetails(this IMailPlusClient operations, string encryptedMailingId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetCampaignMailingDetailsAsync(encryptedMailingId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get details of a campaign mailing
            /// </summary>
            /// <remarks>
            /// Returns the details of a given mailing sent by a campaign, including
            /// details of the used links.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetCampaignMailingDetailsAsync(this IMailPlusClient operations, string encryptedMailingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetCampaignMailingDetailsWithHttpMessagesAsync(encryptedMailingId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get bounces for a campaign mailing
            /// </summary>
            /// <remarks>
            /// Returns bounced contacts.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            public static object GetCampaignMailingBounces(this IMailPlusClient operations, string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetCampaignMailingBouncesAsync(encryptedMailingId, after, pageSize, fromDate, toDate), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get bounces for a campaign mailing
            /// </summary>
            /// <remarks>
            /// Returns bounced contacts.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetCampaignMailingBouncesAsync(this IMailPlusClient operations, string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetCampaignMailingBouncesWithHttpMessagesAsync(encryptedMailingId, after, pageSize, fromDate, toDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get clicks for a campaign mailing
            /// </summary>
            /// <remarks>
            /// Returns contacts who clicked a link in a given mailing. Link details can
            /// be retrieved by using the GET method
            /// /campaign-mailing/{encryptedMailingId}.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            public static object GetCampaignMailingClicks(this IMailPlusClient operations, string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetCampaignMailingClicksAsync(encryptedMailingId, after, pageSize, fromDate, toDate), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get clicks for a campaign mailing
            /// </summary>
            /// <remarks>
            /// Returns contacts who clicked a link in a given mailing. Link details can
            /// be retrieved by using the GET method
            /// /campaign-mailing/{encryptedMailingId}.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetCampaignMailingClicksAsync(this IMailPlusClient operations, string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetCampaignMailingClicksWithHttpMessagesAsync(encryptedMailingId, after, pageSize, fromDate, toDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get clicks for a campaign mailing for a contact
            /// </summary>
            /// <remarks>
            /// Returns click interactions for a given contact in a specified mailing.
            /// Link details can be retrieved by using the GET method
            /// /campaign-mailing/{encryptedMailingId}.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='campaignSubscriptionId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            public static object GetCampaignMailingContactClicks(this IMailPlusClient operations, string encryptedMailingId, int campaignSubscriptionId, int? after = default(int?), int? pageSize = default(int?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetCampaignMailingContactClicksAsync(encryptedMailingId, campaignSubscriptionId, after, pageSize, fromDate, toDate), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get clicks for a campaign mailing for a contact
            /// </summary>
            /// <remarks>
            /// Returns click interactions for a given contact in a specified mailing.
            /// Link details can be retrieved by using the GET method
            /// /campaign-mailing/{encryptedMailingId}.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='campaignSubscriptionId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetCampaignMailingContactClicksAsync(this IMailPlusClient operations, string encryptedMailingId, int campaignSubscriptionId, int? after = default(int?), int? pageSize = default(int?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetCampaignMailingContactClicksWithHttpMessagesAsync(encryptedMailingId, campaignSubscriptionId, after, pageSize, fromDate, toDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get opens for a campaign mailing
            /// </summary>
            /// <remarks>
            /// Returns contacts who opened a given mailing.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            public static object GetCampaignMailingOpens(this IMailPlusClient operations, string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetCampaignMailingOpensAsync(encryptedMailingId, after, pageSize, fromDate, toDate), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get opens for a campaign mailing
            /// </summary>
            /// <remarks>
            /// Returns contacts who opened a given mailing.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetCampaignMailingOpensAsync(this IMailPlusClient operations, string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetCampaignMailingOpensWithHttpMessagesAsync(encryptedMailingId, after, pageSize, fromDate, toDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get opens for a campaign mailing for a contact
            /// </summary>
            /// <remarks>
            /// Returns open interations for a given contact in a specified mailing.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='campaignSubscriptionId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            public static object GetCampaignMailingContactOpens(this IMailPlusClient operations, string encryptedMailingId, int campaignSubscriptionId, int? after = default(int?), int? pageSize = default(int?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetCampaignMailingContactOpensAsync(encryptedMailingId, campaignSubscriptionId, after, pageSize, fromDate, toDate), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get opens for a campaign mailing for a contact
            /// </summary>
            /// <remarks>
            /// Returns open interations for a given contact in a specified mailing.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='campaignSubscriptionId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetCampaignMailingContactOpensAsync(this IMailPlusClient operations, string encryptedMailingId, int campaignSubscriptionId, int? after = default(int?), int? pageSize = default(int?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetCampaignMailingContactOpensWithHttpMessagesAsync(encryptedMailingId, campaignSubscriptionId, after, pageSize, fromDate, toDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get recipients for a campaign mailing
            /// </summary>
            /// <remarks>
            /// Returns contacts to which the mailing has been sent.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            public static object GetCampaignMailingRecipientContacts(this IMailPlusClient operations, string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetCampaignMailingRecipientContactsAsync(encryptedMailingId, after, pageSize, fromDate, toDate), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get recipients for a campaign mailing
            /// </summary>
            /// <remarks>
            /// Returns contacts to which the mailing has been sent.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetCampaignMailingRecipientContactsAsync(this IMailPlusClient operations, string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetCampaignMailingRecipientContactsWithHttpMessagesAsync(encryptedMailingId, after, pageSize, fromDate, toDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all campaigns
            /// </summary>
            /// <remarks>
            /// Returns a list of all campaigns, including external campaign triggers.
            /// Other trigger types will not be shown.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IList<Campaign> GetCampaigns(this IMailPlusClient operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetCampaignsAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all campaigns
            /// </summary>
            /// <remarks>
            /// Returns a list of all campaigns, including external campaign triggers.
            /// Other trigger types will not be shown.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<Campaign>> GetCampaignsAsync(this IMailPlusClient operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetCampaignsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Trigger a campaign for a specific contact
            /// </summary>
            /// <remarks>
            /// Triggers a campaign for a given contact. The encryptedTriggerId can be
            /// retrieved by using the GET method /campaign/list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedTriggerId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ErrorResponse TriggerCampaign(this IMailPlusClient operations, string encryptedTriggerId, CampaignTriggerRequest body)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).TriggerCampaignAsync(encryptedTriggerId, body), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Trigger a campaign for a specific contact
            /// </summary>
            /// <remarks>
            /// Triggers a campaign for a given contact. The encryptedTriggerId can be
            /// retrieved by using the GET method /campaign/list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedTriggerId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ErrorResponse> TriggerCampaignAsync(this IMailPlusClient operations, string encryptedTriggerId, CampaignTriggerRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.TriggerCampaignWithHttpMessagesAsync(encryptedTriggerId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all mailings of a campaign
            /// </summary>
            /// <remarks>
            /// Returns all mailings being sent by a given campaign. The
            /// encryptedCampaignId can be retrieved by using the GET method
            /// /campaign/list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedCampaignId'>
            /// </param>
            public static object GetCampaignMailings(this IMailPlusClient operations, string encryptedCampaignId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetCampaignMailingsAsync(encryptedCampaignId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all mailings of a campaign
            /// </summary>
            /// <remarks>
            /// Returns all mailings being sent by a given campaign. The
            /// encryptedCampaignId can be retrieved by using the GET method
            /// /campaign/list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedCampaignId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetCampaignMailingsAsync(this IMailPlusClient operations, string encryptedCampaignId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetCampaignMailingsWithHttpMessagesAsync(encryptedCampaignId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stop a campaign for a specific contact
            /// </summary>
            /// <remarks>
            /// Stops a running campaign for a given contact. The encryptedCampaignId can
            /// be retrieved by using the GET method /campaign/list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedCampaignId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ErrorResponse StopCampaign(this IMailPlusClient operations, string encryptedCampaignId, CampaignStopRequest body)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).StopCampaignAsync(encryptedCampaignId, body), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop a campaign for a specific contact
            /// </summary>
            /// <remarks>
            /// Stops a running campaign for a given contact. The encryptedCampaignId can
            /// be retrieved by using the GET method /campaign/list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedCampaignId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ErrorResponse> StopCampaignAsync(this IMailPlusClient operations, string encryptedCampaignId, CampaignStopRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.StopCampaignWithHttpMessagesAsync(encryptedCampaignId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a contact
            /// </summary>
            /// <remarks>
            /// Adds a contact to Mailplus. A unique identifier "externalId" is required
            /// for each contact. Available properties can be retrieved by using the GET
            /// methode /contact/properties/list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ErrorResponse InsertContact(this IMailPlusClient operations, ContactRequest body)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).InsertContactAsync(body), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a contact
            /// </summary>
            /// <remarks>
            /// Adds a contact to Mailplus. A unique identifier "externalId" is required
            /// for each contact. Available properties can be retrieved by using the GET
            /// methode /contact/properties/list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ErrorResponse> InsertContactAsync(this IMailPlusClient operations, ContactRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.InsertContactWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get bounced contacts
            /// </summary>
            /// <remarks>
            /// Returns bounced contacts within a specific period of time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            public static object GetBouncedContacts(this IMailPlusClient operations, System.DateTime fromDate, System.DateTime toDate)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetBouncedContactsAsync(fromDate, toDate), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get bounced contacts
            /// </summary>
            /// <remarks>
            /// Returns bounced contacts within a specific period of time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetBouncedContactsAsync(this IMailPlusClient operations, System.DateTime fromDate, System.DateTime toDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetBouncedContactsWithHttpMessagesAsync(fromDate, toDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all properties
            /// </summary>
            /// <remarks>
            /// Returns a list of available properties that are part of a contact object.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IList<Property> GetContactProperties(this IMailPlusClient operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetContactPropertiesAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all properties
            /// </summary>
            /// <remarks>
            /// Returns a list of available properties that are part of a contact object.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<Property>> GetContactPropertiesAsync(this IMailPlusClient operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetContactPropertiesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get contacts by properties
            /// </summary>
            /// <remarks>
            /// Returns a contact based on a given property value. Available properties
            /// can be retrieved by using the GET methode /contact/properties/list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mPSearchQuery'>
            /// </param>
            public static System.Collections.Generic.IList<Contact> SearchContacts(this IMailPlusClient operations, string mPSearchQuery)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).SearchContactsAsync(mPSearchQuery), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get contacts by properties
            /// </summary>
            /// <remarks>
            /// Returns a contact based on a given property value. Available properties
            /// can be retrieved by using the GET methode /contact/properties/list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mPSearchQuery'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<Contact>> SearchContactsAsync(this IMailPlusClient operations, string mPSearchQuery, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.SearchContactsWithHttpMessagesAsync(mPSearchQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get updated contacts
            /// </summary>
            /// <remarks>
            /// Returns contacts which have been updated within a specific period of time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            public static object GetUpdatedContacts(this IMailPlusClient operations, System.DateTime fromDate, System.DateTime toDate)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetUpdatedContactsAsync(fromDate, toDate), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get updated contacts
            /// </summary>
            /// <remarks>
            /// Returns contacts which have been updated within a specific period of time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetUpdatedContactsAsync(this IMailPlusClient operations, System.DateTime fromDate, System.DateTime toDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetUpdatedContactsWithHttpMessagesAsync(fromDate, toDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a contact
            /// </summary>
            /// <remarks>
            /// Returns a given contact, including a list of all properties. Properties
            /// will only be shown if data is available.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalId'>
            /// </param>
            public static object GetContact(this IMailPlusClient operations, string externalId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetContactAsync(externalId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a contact
            /// </summary>
            /// <remarks>
            /// Returns a given contact, including a list of all properties. Properties
            /// will only be shown if data is available.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetContactAsync(this IMailPlusClient operations, string externalId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetContactWithHttpMessagesAsync(externalId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a contact
            /// </summary>
            /// <remarks>
            /// Modifies a existing given contact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='externalId'>
            /// </param>
            public static ErrorResponse UpdateContact(this IMailPlusClient operations, ContactRequest body, string externalId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).UpdateContactAsync(body, externalId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a contact
            /// </summary>
            /// <remarks>
            /// Modifies a existing given contact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='externalId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ErrorResponse> UpdateContactAsync(this IMailPlusClient operations, ContactRequest body, string externalId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateContactWithHttpMessagesAsync(body, externalId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get campaign mailing history for a contact
            /// </summary>
            /// <remarks>
            /// Returns received campaign mailings for a given contact. Default pagesize
            /// is 50 (Cannot be modified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            public static object GetContactCampaignMailingHistory(this IMailPlusClient operations, string externalId, int? after = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetContactCampaignMailingHistoryAsync(externalId, after), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get campaign mailing history for a contact
            /// </summary>
            /// <remarks>
            /// Returns received campaign mailings for a given contact. Default pagesize
            /// is 50 (Cannot be modified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetContactCampaignMailingHistoryAsync(this IMailPlusClient operations, string externalId, int? after = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetContactCampaignMailingHistoryWithHttpMessagesAsync(externalId, after, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get form history for a contact
            /// </summary>
            /// <remarks>
            /// Returns submitted forms for a given contact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object GetContactFormHistory(this IMailPlusClient operations, string externalId, int? after = default(int?), int? pageSize = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetContactFormHistoryAsync(externalId, after, pageSize), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get form history for a contact
            /// </summary>
            /// <remarks>
            /// Returns submitted forms for a given contact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetContactFormHistoryAsync(this IMailPlusClient operations, string externalId, int? after = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetContactFormHistoryWithHttpMessagesAsync(externalId, after, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get mailing history for a contact
            /// </summary>
            /// <remarks>
            /// Returns received mailings for a given contact. Default pagesize is 50
            /// (Cannot be modified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            public static object GetContactMailingHistory(this IMailPlusClient operations, string externalId, int? after = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetContactMailingHistoryAsync(externalId, after), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get mailing history for a contact
            /// </summary>
            /// <remarks>
            /// Returns received mailings for a given contact. Default pagesize is 50
            /// (Cannot be modified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetContactMailingHistoryAsync(this IMailPlusClient operations, string externalId, int? after = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetContactMailingHistoryWithHttpMessagesAsync(externalId, after, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a conversion interaction
            /// </summary>
            /// <remarks>
            /// Posts created-, converted and abandoned shopping carts to MailPlus as a
            /// result of click in a sent mailing. The mailplusId is added to every
            /// trackable URL, that leads to your website. This ID is unique for every
            /// mailing and contact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ErrorResponse CreateConversionInteraction(this IMailPlusClient operations, Conversion body)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).CreateConversionInteractionAsync(body), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a conversion interaction
            /// </summary>
            /// <remarks>
            /// Posts created-, converted and abandoned shopping carts to MailPlus as a
            /// result of click in a sent mailing. The mailplusId is added to every
            /// trackable URL, that leads to your website. This ID is unique for every
            /// mailing and contact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ErrorResponse> CreateConversionInteractionAsync(this IMailPlusClient operations, Conversion body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateConversionInteractionWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all forms
            /// </summary>
            /// <remarks>
            /// Returns a list all available forms.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='formSubType'>
            /// Possible values include: 'normal', 'subscribe', 'unSubscribe',
            /// 'editProfile'
            /// </param>
            /// <param name='formState'>
            /// Possible values include: 'draft', 'proof', 'final'
            /// </param>
            public static System.Collections.Generic.IList<Form> GetForms(this IMailPlusClient operations, string formSubType = default(string), string formState = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetFormsAsync(formSubType, formState), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all forms
            /// </summary>
            /// <remarks>
            /// Returns a list all available forms.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='formSubType'>
            /// Possible values include: 'normal', 'subscribe', 'unSubscribe',
            /// 'editProfile'
            /// </param>
            /// <param name='formState'>
            /// Possible values include: 'draft', 'proof', 'final'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<Form>> GetFormsAsync(this IMailPlusClient operations, string formSubType = default(string), string formState = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetFormsWithHttpMessagesAsync(formSubType, formState, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get form results
            /// </summary>
            /// <remarks>
            /// Returns submitted results of a requested form, including all given answers
            /// for every submit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='formId'>
            /// </param>
            /// <param name='completed'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            public static System.Collections.Generic.IList<FormResult> GetFormResults(this IMailPlusClient operations, int formId, bool? completed = default(bool?), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetFormResultsAsync(formId, completed, startDate, endDate), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get form results
            /// </summary>
            /// <remarks>
            /// Returns submitted results of a requested form, including all given answers
            /// for every submit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='formId'>
            /// </param>
            /// <param name='completed'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<FormResult>> GetFormResultsAsync(this IMailPlusClient operations, int formId, bool? completed = default(bool?), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetFormResultsWithHttpMessagesAsync(formId, completed, startDate, endDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Post a form result
            /// </summary>
            /// <remarks>
            /// Submits a form response to a MailPlus form. The post URL needs to refer to
            /// your own system.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='formId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static FormResponse SubmitForm(this IMailPlusClient operations, int formId, ParamsModel body)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).SubmitFormAsync(formId, body), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post a form result
            /// </summary>
            /// <remarks>
            /// Submits a form response to a MailPlus form. The post URL needs to refer to
            /// your own system.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='formId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<FormResponse> SubmitFormAsync(this IMailPlusClient operations, int formId, ParamsModel body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.SubmitFormWithHttpMessagesAsync(formId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get form result
            /// </summary>
            /// <remarks>
            /// Returns a submitted result of a requested form for a given formResultId. A
            /// formResultId can be retrieved by using the GET method
            /// /contact/{externalId}/forms.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='formId'>
            /// </param>
            /// <param name='formResultId'>
            /// </param>
            public static object GetFormResult(this IMailPlusClient operations, int formId, int formResultId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetFormResultAsync(formId, formResultId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get form result
            /// </summary>
            /// <remarks>
            /// Returns a submitted result of a requested form for a given formResultId. A
            /// formResultId can be retrieved by using the GET method
            /// /contact/{externalId}/forms.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='formId'>
            /// </param>
            /// <param name='formResultId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetFormResultAsync(this IMailPlusClient operations, int formId, int formResultId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetFormResultWithHttpMessagesAsync(formId, formResultId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a form
            /// </summary>
            /// <remarks>
            /// Returns a HTML output of the requested form.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='formId'>
            /// </param>
            /// <param name='postUrl'>
            /// </param>
            /// <param name='encId'>
            /// Unique (MailPlus) id of a contact (when present the form is prefilled with
            /// contact fields)
            /// </param>
            /// <param name='extraParams'>
            /// </param>
            /// <param name='outputFormat'>
            /// Possible values include: 'HTML4STRICT', 'XHTML1STRICT'
            /// </param>
            /// <param name='outputMode'>
            /// Possible values include: 'TABLES', 'DIV'
            /// </param>
            public static object GetForm(this IMailPlusClient operations, int formId, string postUrl, string encId = default(string), string extraParams = default(string), string outputFormat = "HTML4STRICT", string outputMode = "TABLES")
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetFormAsync(formId, postUrl, encId, extraParams, outputFormat, outputMode), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a form
            /// </summary>
            /// <remarks>
            /// Returns a HTML output of the requested form.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='formId'>
            /// </param>
            /// <param name='postUrl'>
            /// </param>
            /// <param name='encId'>
            /// Unique (MailPlus) id of a contact (when present the form is prefilled with
            /// contact fields)
            /// </param>
            /// <param name='extraParams'>
            /// </param>
            /// <param name='outputFormat'>
            /// Possible values include: 'HTML4STRICT', 'XHTML1STRICT'
            /// </param>
            /// <param name='outputMode'>
            /// Possible values include: 'TABLES', 'DIV'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetFormAsync(this IMailPlusClient operations, int formId, string postUrl, string encId = default(string), string extraParams = default(string), string outputFormat = "HTML4STRICT", string outputMode = "TABLES", System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetFormWithHttpMessagesAsync(formId, postUrl, encId, extraParams, outputFormat, outputMode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Post a form
            /// </summary>
            /// <remarks>
            /// Returns a prefilled HTML output of a requested form, based on the given
            /// parameters for a specific contact.  If a contact is present in MailPlus,
            /// existing data will be prefilled in de used contact fields. The post URL
            /// needs to refer to your own system.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='formId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object PostForm(this IMailPlusClient operations, int formId, FormRequest body)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).PostFormAsync(formId, body), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post a form
            /// </summary>
            /// <remarks>
            /// Returns a prefilled HTML output of a requested form, based on the given
            /// parameters for a specific contact.  If a contact is present in MailPlus,
            /// existing data will be prefilled in de used contact fields. The post URL
            /// needs to refer to your own system.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='formId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> PostFormAsync(this IMailPlusClient operations, int formId, FormRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PostFormWithHttpMessagesAsync(formId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get sent mailings in period
            /// </summary>
            /// <remarks>
            /// Returns a list of all mailings, including a link to the archived online
            /// version of the sent mailing.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            public static object GetMailings(this IMailPlusClient operations, System.DateTime fromDate, System.DateTime toDate)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetMailingsAsync(fromDate, toDate), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get sent mailings in period
            /// </summary>
            /// <remarks>
            /// Returns a list of all mailings, including a link to the archived online
            /// version of the sent mailing.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetMailingsAsync(this IMailPlusClient operations, System.DateTime fromDate, System.DateTime toDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetMailingsWithHttpMessagesAsync(fromDate, toDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get mailing data
            /// </summary>
            /// <remarks>
            /// Returns the details of a given mailing, including details of the used
            /// links.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            public static object GetMailingDetails(this IMailPlusClient operations, string encryptedMailingId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetMailingDetailsAsync(encryptedMailingId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get mailing data
            /// </summary>
            /// <remarks>
            /// Returns the details of a given mailing, including details of the used
            /// links.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetMailingDetailsAsync(this IMailPlusClient operations, string encryptedMailingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetMailingDetailsWithHttpMessagesAsync(encryptedMailingId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get bounces for mailing
            /// </summary>
            /// <remarks>
            /// Returns bounced contacts.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object GetMailingBounces(this IMailPlusClient operations, string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetMailingBouncesAsync(encryptedMailingId, after, pageSize), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get bounces for mailing
            /// </summary>
            /// <remarks>
            /// Returns bounced contacts.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetMailingBouncesAsync(this IMailPlusClient operations, string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetMailingBouncesWithHttpMessagesAsync(encryptedMailingId, after, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get clicks for mailing
            /// </summary>
            /// <remarks>
            /// Returns contacts who clicked a link in a given mailing. Link details can
            /// be retrieved by using the GET method /mailing/{encryptedMailingId}.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object GetMailingClicks(this IMailPlusClient operations, string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetMailingClicksAsync(encryptedMailingId, after, pageSize), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get clicks for mailing
            /// </summary>
            /// <remarks>
            /// Returns contacts who clicked a link in a given mailing. Link details can
            /// be retrieved by using the GET method /mailing/{encryptedMailingId}.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetMailingClicksAsync(this IMailPlusClient operations, string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetMailingClicksWithHttpMessagesAsync(encryptedMailingId, after, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get clicks of a mailing for a contact
            /// </summary>
            /// <remarks>
            /// Returns click interactions for a given contact in a specified mailing.
            /// Link details can be retrieved by using the GET method
            /// /mailing/{encryptedMailingId}.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='externalId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object GetMailingContactClicks(this IMailPlusClient operations, string encryptedMailingId, string externalId, int? after = default(int?), int? pageSize = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetMailingContactClicksAsync(encryptedMailingId, externalId, after, pageSize), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get clicks of a mailing for a contact
            /// </summary>
            /// <remarks>
            /// Returns click interactions for a given contact in a specified mailing.
            /// Link details can be retrieved by using the GET method
            /// /mailing/{encryptedMailingId}.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='externalId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetMailingContactClicksAsync(this IMailPlusClient operations, string encryptedMailingId, string externalId, int? after = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetMailingContactClicksWithHttpMessagesAsync(encryptedMailingId, externalId, after, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get opens for mailing
            /// </summary>
            /// <remarks>
            /// Returns contacts who opened a given mailing.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object GetMailingOpens(this IMailPlusClient operations, string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetMailingOpensAsync(encryptedMailingId, after, pageSize), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get opens for mailing
            /// </summary>
            /// <remarks>
            /// Returns contacts who opened a given mailing.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetMailingOpensAsync(this IMailPlusClient operations, string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetMailingOpensWithHttpMessagesAsync(encryptedMailingId, after, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get opens of a mailing for a contact
            /// </summary>
            /// <remarks>
            /// Returns open interations for a given contact in a specified mailing.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='externalId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object GetMailingContactOpens(this IMailPlusClient operations, string encryptedMailingId, string externalId, int? after = default(int?), int? pageSize = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetMailingContactOpensAsync(encryptedMailingId, externalId, after, pageSize), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get opens of a mailing for a contact
            /// </summary>
            /// <remarks>
            /// Returns open interations for a given contact in a specified mailing.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='externalId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetMailingContactOpensAsync(this IMailPlusClient operations, string encryptedMailingId, string externalId, int? after = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetMailingContactOpensWithHttpMessagesAsync(encryptedMailingId, externalId, after, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get recipients for mailing
            /// </summary>
            /// <remarks>
            /// Returns contacts to which the mailing has been sent.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object GetMailingRecipientContacts(this IMailPlusClient operations, string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetMailingRecipientContactsAsync(encryptedMailingId, after, pageSize), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get recipients for mailing
            /// </summary>
            /// <remarks>
            /// Returns contacts to which the mailing has been sent.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='after'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetMailingRecipientContactsAsync(this IMailPlusClient operations, string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetMailingRecipientContactsWithHttpMessagesAsync(encryptedMailingId, after, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get mailing statistics
            /// </summary>
            /// <remarks>
            /// Returns a summary of the results for a sent mailing, such as the opens,
            /// clicks, bounces, etc.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            public static object GetMailingStats(this IMailPlusClient operations, string encryptedMailingId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetMailingStatsAsync(encryptedMailingId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get mailing statistics
            /// </summary>
            /// <remarks>
            /// Returns a summary of the results for a sent mailing, such as the opens,
            /// clicks, bounces, etc.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='encryptedMailingId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetMailingStatsAsync(this IMailPlusClient operations, string encryptedMailingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetMailingStatsWithHttpMessagesAsync(encryptedMailingId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add an order
            /// </summary>
            /// <remarks>
            /// Adds an order to MailPlus.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ErrorResponse InsertOrder(this IMailPlusClient operations, OrderRequest body)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).InsertOrderAsync(body), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add an order
            /// </summary>
            /// <remarks>
            /// Adds an order to MailPlus.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ErrorResponse> InsertOrderAsync(this IMailPlusClient operations, OrderRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.InsertOrderWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an order
            /// </summary>
            /// <remarks>
            /// Deletes an existing order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalOrderId'>
            /// </param>
            public static ErrorResponse DeleteOrder(this IMailPlusClient operations, string externalOrderId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).DeleteOrderAsync(externalOrderId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an order
            /// </summary>
            /// <remarks>
            /// Deletes an existing order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalOrderId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ErrorResponse> DeleteOrderAsync(this IMailPlusClient operations, string externalOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteOrderWithHttpMessagesAsync(externalOrderId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an order
            /// </summary>
            /// <remarks>
            /// Updates an existing order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalOrderId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ErrorResponse UpdateOrder(this IMailPlusClient operations, string externalOrderId, OrderRequest body)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).UpdateOrderAsync(externalOrderId, body), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an order
            /// </summary>
            /// <remarks>
            /// Updates an existing order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalOrderId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ErrorResponse> UpdateOrderAsync(this IMailPlusClient operations, string externalOrderId, OrderRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateOrderWithHttpMessagesAsync(externalOrderId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a product
            /// </summary>
            /// <remarks>
            /// Adds a product to MailPlus.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ErrorResponse InsertProduct(this IMailPlusClient operations, ProductRequest body)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).InsertProductAsync(body), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a product
            /// </summary>
            /// <remarks>
            /// Adds a product to MailPlus.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ErrorResponse> InsertProductAsync(this IMailPlusClient operations, ProductRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.InsertProductWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a product
            /// </summary>
            /// <remarks>
            /// Deletes an existing given product.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalProductId'>
            /// </param>
            public static ErrorResponse DeleteProduct(this IMailPlusClient operations, string externalProductId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).DeleteProductAsync(externalProductId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a product
            /// </summary>
            /// <remarks>
            /// Deletes an existing given product.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalProductId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ErrorResponse> DeleteProductAsync(this IMailPlusClient operations, string externalProductId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteProductWithHttpMessagesAsync(externalProductId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a product
            /// </summary>
            /// <remarks>
            /// Returns a given product.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalProductId'>
            /// </param>
            public static object GetProduct(this IMailPlusClient operations, string externalProductId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetProductAsync(externalProductId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a product
            /// </summary>
            /// <remarks>
            /// Returns a given product.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalProductId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetProductAsync(this IMailPlusClient operations, string externalProductId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetProductWithHttpMessagesAsync(externalProductId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a product
            /// </summary>
            /// <remarks>
            /// Updates an existing given product.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalProductId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ErrorResponse UpdateProduct(this IMailPlusClient operations, string externalProductId, ProductRequest body)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).UpdateProductAsync(externalProductId, body), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a product
            /// </summary>
            /// <remarks>
            /// Updates an existing given product.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalProductId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ErrorResponse> UpdateProductAsync(this IMailPlusClient operations, string externalProductId, ProductRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateProductWithHttpMessagesAsync(externalProductId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Subscribe a contact
            /// </summary>
            /// <remarks>
            /// Adds a contact to Mailplus. A unique identifier "externalId" is NOT
            /// required. Available properties can be retrieved by using the GET methode
            /// /contact/properties/list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ErrorResponse SubscribeContact(this IMailPlusClient operations, Contact body)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).SubscribeContactAsync(body), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subscribe a contact
            /// </summary>
            /// <remarks>
            /// Adds a contact to Mailplus. A unique identifier "externalId" is NOT
            /// required. Available properties can be retrieved by using the GET methode
            /// /contact/properties/list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ErrorResponse> SubscribeContactAsync(this IMailPlusClient operations, Contact body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.SubscribeContactWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all temporary lists
            /// </summary>
            /// <remarks>
            /// Returns a list of all available temporary lists.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IList<TemporaryList> GetTemporaryLists(this IMailPlusClient operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).GetTemporaryListsAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all temporary lists
            /// </summary>
            /// <remarks>
            /// Returns a list of all available temporary lists.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<TemporaryList>> GetTemporaryListsAsync(this IMailPlusClient operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetTemporaryListsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a temporary list
            /// </summary>
            /// <remarks>
            /// Adds a set of existing contacts as a temporary list to MailPlus, based on
            /// external contact id's.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ErrorResponse CreateTemporaryList(this IMailPlusClient operations, CreateTemporaryListRequest body)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).CreateTemporaryListAsync(body), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a temporary list
            /// </summary>
            /// <remarks>
            /// Adds a set of existing contacts as a temporary list to MailPlus, based on
            /// external contact id's.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ErrorResponse> CreateTemporaryListAsync(this IMailPlusClient operations, CreateTemporaryListRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateTemporaryListWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a temporary list
            /// </summary>
            /// <remarks>
            /// Deletes a temporary list. An externalTemporaryListId can be retrieved by
            /// using the GET method /templist.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalTemporaryListId'>
            /// </param>
            public static ErrorResponse DeleteTemporaryList(this IMailPlusClient operations, string externalTemporaryListId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).DeleteTemporaryListAsync(externalTemporaryListId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a temporary list
            /// </summary>
            /// <remarks>
            /// Deletes a temporary list. An externalTemporaryListId can be retrieved by
            /// using the GET method /templist.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalTemporaryListId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ErrorResponse> DeleteTemporaryListAsync(this IMailPlusClient operations, string externalTemporaryListId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteTemporaryListWithHttpMessagesAsync(externalTemporaryListId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add contacts to a temporary list
            /// </summary>
            /// <remarks>
            /// Adds a set of existing contacts to a given temporary list, based on
            /// external contact id's. An externalTemporaryListId can be retrieved by
            /// using the GET method /templist.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalTemporaryListId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ErrorResponse AddContactsToTemporaryList(this IMailPlusClient operations, string externalTemporaryListId, AddContactsToTemporaryListRequest body)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMailPlusClient)s).AddContactsToTemporaryListAsync(externalTemporaryListId, body), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add contacts to a temporary list
            /// </summary>
            /// <remarks>
            /// Adds a set of existing contacts to a given temporary list, based on
            /// external contact id's. An externalTemporaryListId can be retrieved by
            /// using the GET method /templist.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='externalTemporaryListId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ErrorResponse> AddContactsToTemporaryListAsync(this IMailPlusClient operations, string externalTemporaryListId, AddContactsToTemporaryListRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddContactsToTemporaryListWithHttpMessagesAsync(externalTemporaryListId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
