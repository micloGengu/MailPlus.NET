// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MailPlus
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// </summary>
    public partial interface IMailPlusClient : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


            /// <summary>
        /// Get details of a campaign mailing
        /// </summary>
        /// Returns the details of a given mailing sent by a campaign,
        /// including details of the used links.
        /// <param name='encryptedMailingId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetCampaignMailingDetailsWithHttpMessagesAsync(string encryptedMailingId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get bounces for a campaign mailing
        /// </summary>
        /// Returns bounced contacts.
        /// <param name='encryptedMailingId'>
        /// </param>
        /// <param name='after'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='fromDate'>
        /// </param>
        /// <param name='toDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetCampaignMailingBouncesWithHttpMessagesAsync(string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get clicks for a campaign mailing
        /// </summary>
        /// Returns contacts who clicked a link in a given mailing. Link
        /// details can be retrieved by using the GET method
        /// /campaign-mailing/{encryptedMailingId}.
        /// <param name='encryptedMailingId'>
        /// </param>
        /// <param name='after'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='fromDate'>
        /// </param>
        /// <param name='toDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetCampaignMailingClicksWithHttpMessagesAsync(string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get clicks for a campaign mailing for a contact
        /// </summary>
        /// Returns click interactions for a given contact in a specified
        /// mailing. Link details can be retrieved by using the GET method
        /// /campaign-mailing/{encryptedMailingId}.
        /// <param name='encryptedMailingId'>
        /// </param>
        /// <param name='campaignSubscriptionId'>
        /// </param>
        /// <param name='after'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='fromDate'>
        /// </param>
        /// <param name='toDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetCampaignMailingContactClicksWithHttpMessagesAsync(string encryptedMailingId, int campaignSubscriptionId, int? after = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get opens for a campaign mailing
        /// </summary>
        /// Returns contacts who opened a given mailing.
        /// <param name='encryptedMailingId'>
        /// </param>
        /// <param name='after'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='fromDate'>
        /// </param>
        /// <param name='toDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetCampaignMailingOpensWithHttpMessagesAsync(string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get opens for a campaign mailing for a contact
        /// </summary>
        /// Returns open interations for a given contact in a specified
        /// mailing.
        /// <param name='encryptedMailingId'>
        /// </param>
        /// <param name='campaignSubscriptionId'>
        /// </param>
        /// <param name='after'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='fromDate'>
        /// </param>
        /// <param name='toDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetCampaignMailingContactOpensWithHttpMessagesAsync(string encryptedMailingId, int campaignSubscriptionId, int? after = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get recipients for a campaign mailing
        /// </summary>
        /// Returns contacts to which the mailing has been sent.
        /// <param name='encryptedMailingId'>
        /// </param>
        /// <param name='after'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='fromDate'>
        /// </param>
        /// <param name='toDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetCampaignMailingRecipientContactsWithHttpMessagesAsync(string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all campaigns
        /// </summary>
        /// Returns a list of all campaigns, including external campaign
        /// triggers. Other trigger types will not be shown.
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Campaign>>> GetCampaignsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Trigger a campaign for a specific contact
        /// </summary>
        /// Triggers a campaign for a given contact. The encryptedTriggerId
        /// can be retrieved by using the GET method /campaign/list.
        /// <param name='encryptedTriggerId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorResponse>> TriggerCampaignWithHttpMessagesAsync(string encryptedTriggerId, CampaignTriggerRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all mailings of a campaign
        /// </summary>
        /// Returns all mailings being sent by a given campaign. The
        /// encryptedCampaignId can be retrieved by using the GET method
        /// /campaign/list.
        /// <param name='encryptedCampaignId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetCampaignMailingsWithHttpMessagesAsync(string encryptedCampaignId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Stop a campaign for a specific contact
        /// </summary>
        /// Stops a running campaign for a given contact. The
        /// encryptedCampaignId can be retrieved by using the GET method
        /// /campaign/list.
        /// <param name='encryptedCampaignId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorResponse>> StopCampaignWithHttpMessagesAsync(string encryptedCampaignId, CampaignStopRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a contact
        /// </summary>
        /// Adds a contact to Mailplus. A unique identifier "externalId" is
        /// required for each contact. Available properties can be retrieved
        /// by using the GET methode /contact/properties/list.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorResponse>> InsertContactWithHttpMessagesAsync(ContactRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get bounced contacts
        /// </summary>
        /// Returns bounced contacts within a specific period of time.
        /// <param name='fromDate'>
        /// </param>
        /// <param name='toDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetBouncedContactsWithHttpMessagesAsync(DateTime fromDate, DateTime toDate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all properties
        /// </summary>
        /// Returns a list of available properties that are part of a contact
        /// object.
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Property>>> GetContactPropertiesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get contacts by properties
        /// </summary>
        /// Returns a contact based on a given property value. Available
        /// properties can be retrieved by using the GET methode
        /// /contact/properties/list.
        /// <param name='mPSearchQuery'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Contact>>> SearchContactsWithHttpMessagesAsync(string mPSearchQuery, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get updated contacts
        /// </summary>
        /// Returns contacts which have been updated within a specific period
        /// of time.
        /// <param name='fromDate'>
        /// </param>
        /// <param name='toDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetUpdatedContactsWithHttpMessagesAsync(DateTime fromDate, DateTime toDate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a contact
        /// </summary>
        /// Returns a given contact, including a list of all properties.
        /// Properties will only be shown if data is available.
        /// <param name='externalId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetContactWithHttpMessagesAsync(string externalId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a contact
        /// </summary>
        /// Modifies a existing given contact.
        /// <param name='body'>
        /// </param>
        /// <param name='externalId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorResponse>> UpdateContactWithHttpMessagesAsync(ContactRequest body, string externalId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get campaign mailing history for a contact
        /// </summary>
        /// Returns received campaign mailings for a given contact. Default
        /// pagesize is 50 (Cannot be modified).
        /// <param name='externalId'>
        /// </param>
        /// <param name='after'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetContactCampaignMailingHistoryWithHttpMessagesAsync(string externalId, int? after = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get form history for a contact
        /// </summary>
        /// Returns submitted forms for a given contact.
        /// <param name='externalId'>
        /// </param>
        /// <param name='after'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetContactFormHistoryWithHttpMessagesAsync(string externalId, int? after = default(int?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get mailing history for a contact
        /// </summary>
        /// Returns received mailings for a given contact. Default pagesize is
        /// 50 (Cannot be modified).
        /// <param name='externalId'>
        /// </param>
        /// <param name='after'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetContactMailingHistoryWithHttpMessagesAsync(string externalId, int? after = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a conversion interaction
        /// </summary>
        /// Posts created-, converted and abandoned shopping carts to MailPlus
        /// as a result of click in a sent mailing. The mailplusId is added
        /// to every trackable URL, that leads to your website. This ID is
        /// unique for every mailing and contact.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorResponse>> CreateConversionInteractionWithHttpMessagesAsync(Conversion body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all forms
        /// </summary>
        /// Returns a list all available forms.
        /// <param name='formSubType'>
        /// Possible values include: 'normal', 'subscribe', 'unSubscribe',
        /// 'editProfile'
        /// </param>
        /// <param name='formState'>
        /// Possible values include: 'draft', 'proof', 'final'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Form>>> GetFormsWithHttpMessagesAsync(string formSubType = default(string), string formState = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get form results
        /// </summary>
        /// Returns submitted results of a requested form, including all given
        /// answers for every submit.
        /// <param name='formId'>
        /// </param>
        /// <param name='completed'>
        /// </param>
        /// <param name='startDate'>
        /// </param>
        /// <param name='endDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<FormResult>>> GetFormResultsWithHttpMessagesAsync(int formId, bool? completed = default(bool?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post a form result
        /// </summary>
        /// Submits a form response to a MailPlus form. The post URL needs to
        /// refer to your own system.
        /// <param name='formId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FormResponse>> SubmitFormWithHttpMessagesAsync(int formId, ParamsModel body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get form result
        /// </summary>
        /// Returns a submitted result of a requested form for a given
        /// formResultId. A formResultId can be retrieved by using the GET
        /// method /contact/{externalId}/forms.
        /// <param name='formId'>
        /// </param>
        /// <param name='formResultId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetFormResultWithHttpMessagesAsync(int formId, int formResultId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a form
        /// </summary>
        /// Returns a HTML output of the requested form.
        /// <param name='formId'>
        /// </param>
        /// <param name='postUrl'>
        /// </param>
        /// <param name='encId'>
        /// Unique (MailPlus) id of a contact (when present the form is
        /// prefilled with contact fields)
        /// </param>
        /// <param name='extraParams'>
        /// </param>
        /// <param name='outputFormat'>
        /// Possible values include: 'HTML4STRICT', 'XHTML1STRICT'
        /// </param>
        /// <param name='outputMode'>
        /// Possible values include: 'TABLES', 'DIV'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetFormWithHttpMessagesAsync(int formId, string postUrl, string encId = default(string), string extraParams = default(string), string outputFormat = "HTML4STRICT", string outputMode = "TABLES", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post a form
        /// </summary>
        /// Returns a prefilled HTML output of a requested form, based on the
        /// given parameters for a specific contact.  If a contact is present
        /// in MailPlus, existing data will be prefilled in de used contact
        /// fields. The post URL needs to refer to your own system.
        /// <param name='formId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PostFormWithHttpMessagesAsync(int formId, FormRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get sent mailings in period
        /// </summary>
        /// Returns a list of all mailings, including a link to the archived
        /// online version of the sent mailing.
        /// <param name='fromDate'>
        /// </param>
        /// <param name='toDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetMailingsWithHttpMessagesAsync(DateTime fromDate, DateTime toDate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get mailing data
        /// </summary>
        /// Returns the details of a given mailing, including details of the
        /// used links.
        /// <param name='encryptedMailingId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetMailingDetailsWithHttpMessagesAsync(string encryptedMailingId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get bounces for mailing
        /// </summary>
        /// Returns bounced contacts.
        /// <param name='encryptedMailingId'>
        /// </param>
        /// <param name='after'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetMailingBouncesWithHttpMessagesAsync(string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get clicks for mailing
        /// </summary>
        /// Returns contacts who clicked a link in a given mailing. Link
        /// details can be retrieved by using the GET method
        /// /mailing/{encryptedMailingId}.
        /// <param name='encryptedMailingId'>
        /// </param>
        /// <param name='after'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetMailingClicksWithHttpMessagesAsync(string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get clicks of a mailing for a contact
        /// </summary>
        /// Returns click interactions for a given contact in a specified
        /// mailing. Link details can be retrieved by using the GET method
        /// /mailing/{encryptedMailingId}.
        /// <param name='encryptedMailingId'>
        /// </param>
        /// <param name='externalId'>
        /// </param>
        /// <param name='after'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetMailingContactClicksWithHttpMessagesAsync(string encryptedMailingId, string externalId, int? after = default(int?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get opens for mailing
        /// </summary>
        /// Returns contacts who opened a given mailing.
        /// <param name='encryptedMailingId'>
        /// </param>
        /// <param name='after'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetMailingOpensWithHttpMessagesAsync(string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get opens of a mailing for a contact
        /// </summary>
        /// Returns open interations for a given contact in a specified
        /// mailing.
        /// <param name='encryptedMailingId'>
        /// </param>
        /// <param name='externalId'>
        /// </param>
        /// <param name='after'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetMailingContactOpensWithHttpMessagesAsync(string encryptedMailingId, string externalId, int? after = default(int?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get recipients for mailing
        /// </summary>
        /// Returns contacts to which the mailing has been sent.
        /// <param name='encryptedMailingId'>
        /// </param>
        /// <param name='after'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetMailingRecipientContactsWithHttpMessagesAsync(string encryptedMailingId, int? after = default(int?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get mailing statistics
        /// </summary>
        /// Returns a summary of the results for a sent mailing, such as the
        /// opens, clicks, bounces, etc.
        /// <param name='encryptedMailingId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetMailingStatsWithHttpMessagesAsync(string encryptedMailingId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add an order
        /// </summary>
        /// Adds an order to MailPlus.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorResponse>> InsertOrderWithHttpMessagesAsync(OrderRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an order
        /// </summary>
        /// Deletes an existing order.
        /// <param name='externalOrderId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorResponse>> DeleteOrderWithHttpMessagesAsync(string externalOrderId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an order
        /// </summary>
        /// Updates an existing order.
        /// <param name='externalOrderId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorResponse>> UpdateOrderWithHttpMessagesAsync(string externalOrderId, OrderRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a product
        /// </summary>
        /// Adds a product to MailPlus.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorResponse>> InsertProductWithHttpMessagesAsync(ProductRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a product
        /// </summary>
        /// Deletes an existing given product.
        /// <param name='externalProductId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorResponse>> DeleteProductWithHttpMessagesAsync(string externalProductId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a product
        /// </summary>
        /// Returns a given product.
        /// <param name='externalProductId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetProductWithHttpMessagesAsync(string externalProductId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a product
        /// </summary>
        /// Updates an existing given product.
        /// <param name='externalProductId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorResponse>> UpdateProductWithHttpMessagesAsync(string externalProductId, ProductRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Subscribe a contact
        /// </summary>
        /// Adds a contact to Mailplus. A unique identifier "externalId" is
        /// NOT required. Available properties can be retrieved by using the
        /// GET methode /contact/properties/list.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorResponse>> SubscribeContactWithHttpMessagesAsync(Contact body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all temporary lists
        /// </summary>
        /// Returns a list of all available temporary lists.
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<TemporaryList>>> GetTemporaryListsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a temporary list
        /// </summary>
        /// Adds a set of existing contacts as a temporary list to MailPlus,
        /// based on external contact id's.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorResponse>> CreateTemporaryListWithHttpMessagesAsync(CreateTemporaryListRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a temporary list
        /// </summary>
        /// Deletes a temporary list. An externalTemporaryListId can be
        /// retrieved by using the GET method /templist.
        /// <param name='externalTemporaryListId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorResponse>> DeleteTemporaryListWithHttpMessagesAsync(string externalTemporaryListId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add contacts to a temporary list
        /// </summary>
        /// Adds a set of existing contacts to a given temporary list, based
        /// on external contact id's. An externalTemporaryListId can be
        /// retrieved by using the GET method /templist.
        /// <param name='externalTemporaryListId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorResponse>> AddContactsToTemporaryListWithHttpMessagesAsync(string externalTemporaryListId, AddContactsToTemporaryListRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
